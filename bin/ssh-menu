#!/usr/bin/env perl

use strict;
use warnings;

use Curses::UI;
use Curses::UI::Searchable;


#################
## global vars ##
#################
## available config options:
## show_greeter(bool), greeter_message(str), ssh_config(file),
## disallow_terminal(bool), shell_config(file), program_title(str),
## admin_name(str), admin_email(str), disable_strict_key_check(bool)
## help_file(file)
my $config = {};


#######################
## initialise curses ##
#######################
my $cui = Curses::UI->new(
    -color_support => 0,
    -clear_on_exit => 1,
);


#########################
## initialise ssh lists #
#########################
my @ssh_servers;
my $real_ssh_config = $config->{ssh_config} || $ENV{'HOME'} . '/.ssh/config';
if ( open( my $ssh_config_fh, '<', $real_ssh_config ) ) {
    while( <$ssh_config_fh> ) {
        next unless ( /^host (.+)$/i );
        next if $1 =~ /\*/; ## no thanks to wildcards

        ## split the hosts before pushing
        my @line_list = split(" ", $1);
        push( @ssh_servers, @line_list );
    }
    close $ssh_config_fh;
}
@ssh_servers = sort @ssh_servers; ## sort the list


###################
## initialise ui ##
###################
my $main               = $cui->add('main', 'Window');
my $real_program_title = $config->{program_title} || 'Log on to SSH';

## top bar (title, disclaimer, contact, and intro line)
my $header = $main->add(
    'header', 'Label',
    -text          => $real_program_title,
    -textalignment => 'middle',
    -bold          => 1,
    -underline     => undef,
    -y             => 1,
    -width         => -1,
    -paddingspaces => 1,
);
my $header2 = $main->add(
    'header2', 'Label',
    -text          => 'Please use your arrow keys to navigate, and [enter] to select a host',
    -textalignment => 'middle',
    -bold          => undef,
    -underline     => 1,
    -y             => 2,
    -width         => -1,
    -paddingspaces => 1,
);

## inner box
my $main_window = $cui->add(
    'main_window', 'Window',
    -title => 'List of available hosts',
    -border     => 1, 
    -pad        => 2,
    -padtop     => 4,
    -width      => 120,
    -height     => 30,
    -centered   => 1,
);

my $container = $main_window->add(
    'main_cont', 'Container'
);

my $listbox = $container->add(
    'listbox', 'Listbox',
    -values     => [ @ssh_servers ],
    -labels     => {}, # don't need them
    -wraparound => 1,
    -onchange   => \&get_selected,
    -vscrollbar => 1,
);

## bottom bar
my $real_disallow_terminal = scalar $config->{disallow_terminal} ? 1 : 0;
my $terminal_insert        = ( $real_disallow_terminal ) ? '' : ' | [t] terminal';

my $footer = $main->add(
    'footer', 'Label',
    -text          => "[q] quit | [h] help$terminal_insert | [arrows] browse list | [enter] select entry",
    -textalignment => undef,
    -bold          => 1,
    -underline     => undef,
    -y             => -1,
    -width         => -1,
    -paddingspaces => 1,
);
my $footer2 = $main->add(
    'footer2', 'Label',
    -text          => ' ',
    -textalignment => undef,
    -bold          => undef,
    -underline     => 1,
    -y             => -2,
    -width         => -1,
    -paddingspaces => 1,
);

## render initial windows
$header->draw;
$header2->draw;
$footer->draw;
$footer2->draw;
$main_window->draw;
$listbox->focus;

## refocus subroutine
sub refocus_listbox {
    my $self = @_;

    return $listbox->focus;
}
$cui->set_binding( \&refocus_listbox, "R" );
$cui->set_binding( \&refocus_listbox, "r" );

##################################
##Â extra logic for program loop ##
##################################

## greeter dialogue
sub greeter_dialog {
    my $self = @_;

    my $real_greeter_message = $config->{greeter_message} || 'Unauthorised access is prohibited';

	return $cui->error(
        -title    => $real_program_title,
        -message  => $real_greeter_message,
        -buttons  => [
            {
                -label    => '[ Dismiss ]',
                -value    => 0,
                -shortcut => 'o',
            },
        ],
        -selected => 0,
	);
}
my $real_show_greeter = $config->{show_greeter} ? 1 : 0;
if ( $real_show_greeter ) {
    greeter_dialog(); ## show on program startup
    $cui->set_binding( \&greeter_dialog, "G" );
    $cui->set_binding( \&greeter_dialog, "g" );
}


## help dialogue
sub help_dialog {
    my $self = @_;

    my $real_admin_name  = $config->{admin_name} || 'Root';
    my $real_admin_email = $config->{admin_email} || 'root@localhost';

    my $message  = "For issues with this service, please contact: $real_admin_name <$real_admin_email>\n";
       $message .= "\n";
       $message .= "This software is designed to help the user navigate our fleet ";
       $message .= "of UNIX machines by offering an easy way to browse and select ";
       $message .= "SSH servers. To use this software, become acquainted with the ";
       $message .= "following general keyboard shortcuts:\n";
       $message .= "              [q]    quits the software\n";
       $message .= "              [h]    shows this help dialogue\n";
       $message .= "              [g]    shows the greeting message\n" if $real_show_greeter;
       $message .= "              [t]    exits out to local terminal session\n" unless $real_disallow_terminal;
       $message .= "     [arrow-up/k]    navigate up the list one-by-one\n";
       $message .= "     [arrow-dn/j]    navigate up the list one-by-one\n";
       $message .= "    [pg-up/pg-dn]    skip up or down entire pages\n";
       $message .= "       [home/end]    skip to top or bottom of list\n";
       $message .= " [enter/arrow-rt]    select current list item\n";
       $message .= "\n";
       $message .= "You may additionally want to become familiar withq some ";
       $message .= "list-specific key combinations that are related to the \"less-like\" ";
       $message .= "search-forward and search-backward functions, which will ";
       $message .= "make your life a lot easier when finding specific entries in ";
       $message .= "this list:\n";
       $message .= "              [/]    open search-forward dialog, where you can enter a term\n";
       $message .= "              [?]    open search-backward dialog, where you can enter a term\n";
       $message .= "              [n]    go to the next item matching your search term\n";
       $message .= "              [N]    go to the previous item matching your search term\n";
       $message .= " ";

    ## handle occurances where help file exists
    my $real_help_file = $config->{help_file} || '/etc/ssh-menu.help-file.txt';
    if( -f $real_help_file ) {
        ## reset message
        $message = '';
        if ( open( my $help_file_fh, '<', $real_help_file ) ) {
            while( <$help_file_fh> ) {
                $message .= $_;
            }

            close $help_file_fh;
        }
    }

	return $cui->dialog(
        -title    => 'Help with using this software',
        -message  => $message,
        -buttons  => [
            {
                -label    => '[ Cancel ]',
                -value    => 1,
                -shortcut => 'o',
            },
            {
                -label    => '[ Ok ]',
                -value    => 0,
                -shortcut => 'o',
            },
        ],
        -selected => 1,
	);
};
$cui->set_binding( \&help_dialog, "H" );
$cui->set_binding( \&help_dialog, "h" );

## handle selected item
sub get_selected {
    my $self = @_;

    my $real_disable_strict_key_check = ( $config->{disable_strict_key_check} ) ? 'no' : 'ask';
    my $selected_option               = $listbox->get;

    if ( $selected_option ) {
        exit_mainloop();
        return exec qq{exec ssh -o "LogLevel ERROR" -o "StrictHostKeyChecking $real_disable_strict_key_check" -F "$real_ssh_config" "$selected_option"};
    }

    return 1;
}

## handle terminal request
sub run_terminal {
    my $self = @_;

    my $terminal_bin;
    my $real_shell_config = $config->{shell_config} || $ENV{'HOME'} . '/.shell';

    ## attempt to read ~/.shell
    if ( open( my $shell_config_fh, '<', $real_shell_config ) ) {
        ## found it
        $terminal_bin = <$shell_config_fh>;
        chomp $terminal_bin;
        close $shell_config_fh;
    }

    ## catch bad or missing .shell files
    $terminal_bin = '/bin/bash' unless ( defined $terminal_bin && -x $terminal_bin );
    
    ## done, exit
    exit_mainloop();
    return exec qq{exec "$terminal_bin"};
}
unless ( $real_disallow_terminal ) {
    $cui->set_binding( \&run_terminal, "T" );
    $cui->set_binding( \&run_terminal, "t" );
}

## mainloop killer
sub exit_mainloop {
    my $self = @_;

    $cui->{mainloop} = undef;
    return $cui->leave_curses();
}
$cui->set_binding( \&exit_mainloop, "\x1B" ); # esc
$cui->set_binding( \&exit_mainloop, "Q" );
$cui->set_binding( \&exit_mainloop, "q" );

## boot mainloop
$cui->focus(undef, 1); # 1 = forced focus
$cui->draw;
$cui->{mainloop} = 1;
$cui->do_one_event while ( $cui->{mainloop} );
