#!/usr/bin/env perl

use strict;
use warnings;

use Curses::UI;


#################
## global vars ##
#################
## available config options:
## show_greeter(bool), greeter_message(str), ssh_config(file),
## disallow_terminal(bool), shell_config(file), program_title(str),
## admin_name(str), admin_email(str), disable_strict_key_check(bool)
## help_file(file)
my $config = {};


#######################
## initialise curses ##
#######################
my $cui = Curses::UI->new(
    -color_support => 0,
    -clear_on_exit => 1,
);


#########################
## initialise ssh lists #
#########################
my @ssh_servers;
my $real_ssh_config = $config->{ssh_config} || $ENV{'HOME'} . '/.ssh/config';
if ( open( my $ssh_config_fh, '<', $real_ssh_config ) ) {
    while( <$ssh_config_fh> ) {
        next unless ( /^host (.+)$/i );
        next if $1 =~ /\*/; ## no thanks to wildcards

        ## split the hosts before pushing
        my @line_list = split( " ", $1 );
        push( @ssh_servers, @line_list );
    }
    close $ssh_config_fh;
}
@ssh_servers = sort @ssh_servers; ## sort the list


###################
## initialise ui ##
###################
my $main_window        = $cui->add( 'main', 'Window' );
my $real_program_title = $config->{program_title} || 'Log on to SSH';

## top bar (title, disclaimer, contact, and intro line)
my $header = $main_window->add(
    'header', 'Label',
    -text          => $real_program_title,
    -textalignment => 'middle',
    -bold          => 1,
    -underline     => undef,
    -y             => 1,
    -width         => -1,
    -paddingspaces => 1,
);
my $header2 = $main_window->add(
    'header2', 'Label',
    -text          => 'Please use your arrow keys to navigate, and [enter] to select a host',
    -textalignment => 'middle',
    -bold          => undef,
    -underline     => 1,
    -y             => 2,
    -width         => -1,
    -paddingspaces => 1,
);

my $container = $main_window->add(
    'container', 'Window',
    -width      => 120,
    -height     => 30,
    -centered   => 1,
);

my $listbox = $container->add(
    'listbox', 'Listbox',
    -title      => 'List of available hosts',
    -values     => [ @ssh_servers ],
    -labels     => {}, # don't need them
    -wraparound => 1,
    -onchange   => \&get_selected,
    -vscrollbar => 1,
    -border     => 1,
    -height     => 30,
    -padtop     => 3,
);
my $textentry = $container->add(
    'textentry', 'TextEntry',
    -title    => 'Enter a search term',
    -border   => 1,
    -height   => 3,
    -wrapping => 1,
    -onchange => \&fzf_search,
);


## bottom bar
my $is_fzf_installed = ( -x '/usr/bin/fzf' ) ? 1 : 0;
my $fzf_insert       = ( $is_fzf_installed ) ? ' | [/] search' : '';

my $footer = $main_window->add(
    'footer', 'Label',
    -text          => "[q] quit | [h] help$fzf_insert | [arrows] browse list | [enter] select entry",
    -textalignment => undef,
    -bold          => 1,
    -underline     => undef,
    -y             => -1,
    -width         => -1,
    -paddingspaces => 1,
);
my $footer2 = $main_window->add(
    'footer2', 'Label',
    -text          => ' ',
    -textalignment => undef,
    -bold          => undef,
    -underline     => 1,
    -y             => -2,
    -width         => -1,
    -paddingspaces => 1,
);

## render initial windows
$main_window->draw;
$header->draw;
$header2->draw;
$footer->draw;
$footer2->draw;
$container->draw;
$textentry->draw;
$listbox->focus;

## refocus subroutine
sub listbox_focus {
    my $self = @_;

    return $listbox->focus;
}

##################################
##Â extra logic for program loop ##
##################################

## greeter dialogue
sub greeter_dialog {
    my $self = @_;

    my $real_greeter_message = $config->{greeter_message} || 'Unauthorised access is prohibited';

    return $cui->error(
        -title    => $real_program_title,
        -message  => $real_greeter_message,
        -buttons  => [
            {
                -label    => '[ Dismiss ]',
                -value    => 0,
                -shortcut => 'o',
            },
        ],
        -selected => 0,
    );
}
my $real_show_greeter = $config->{show_greeter} ? 1 : 0;
greeter_dialog() if $real_show_greeter; ## show on program startup


## help dialogue
my $real_disallow_terminal = scalar $config->{disallow_terminal} ? 1 : 0;

sub help_dialog {
    my $self = @_;

    my $real_admin_name  = $config->{admin_name} || 'Root';
    my $real_admin_email = $config->{admin_email} || 'root@localhost';

    my $message  = "For issues with this service, please contact: $real_admin_name <$real_admin_email>\n";
       $message .= "\n";
       $message .= "This program is covered by an Apache-2.0 license, which should ";
       $message .= "be included with the tool. If it is not, please email the address ";
       $message .= "above for a copy.\n";
       $message .= "\n";
       $message .= "This software is designed to help the user navigate our fleet ";
       $message .= "of UNIX machines by offering an easy way to browse and select ";
       $message .= "SSH servers. To use this software, become acquainted with the ";
       $message .= "following general keyboard shortcuts:\n";
       $message .= "              [q]    quits the software\n";
       $message .= "              [h]    shows this help dialogue\n";
       $message .= "              [/]    focus the search box\n";
       $message .= "              [g]    shows the greeting message\n" if $real_show_greeter;
       $message .= "              [t]    exits out to local terminal session\n" unless $real_disallow_terminal;
       $message .= "     [arrow-up/k]    navigate up the list one-by-one\n";
       $message .= "     [arrow-dn/j]    navigate up the list one-by-one\n";
       $message .= "    [pg-up/pg-dn]    skip up or down entire pages\n";
       $message .= "       [home/end]    skip to top or bottom of list\n";
       $message .= " [enter/arrow-rt]    select current list item\n";
       $message .= "\n";

    ## handle occurances where help file exists
    my $real_help_file = $config->{help_file} || '/etc/ssh-menu.help-file.txt';
    if ( -f $real_help_file ) {
        ## reset message
        $message = '';
        if ( open( my $help_file_fh, '<', $real_help_file ) ) {
            while( <$help_file_fh> ) {
                $message .= $_;
            }

            close $help_file_fh;
        }
    }

    return $cui->dialog(
        -title    => 'Help with using this software',
        -message  => $message,
        -buttons  => [
            {
                -label    => '[ Cancel ]',
                -value    => 1,
                -shortcut => 'o',
            },
            {
                -label    => '[ Ok ]',
                -value    => 0,
                -shortcut => 'o',
            },
        ],
        -selected => 1,
    );
};

## Fuzzy search using fzf
sub fzf_search {
    my $self = @_;

    my $entered = $textentry->get;
    my $fzf_input = join( "\n", @ssh_servers );
    my $filtered = `echo "$fzf_input" | /usr/bin/env fzf --filter="$entered"`;
    chomp $filtered;

    if ( $filtered ) {
        my @results = split( "\n", $filtered );
        @results = sort @results; # show in alphabetical order
        $listbox->values( \@results );
        $listbox->draw;
    } else {
        $listbox->values( \@ssh_servers ); ## restore original list
    }

    return 1;
}

## handle fzf focus
sub fzf_focus {
    my $self = @_;

    ## just focus the search box
    return $textentry->focus;
}

## handle selected item
sub get_selected {
    my $self = @_;

    my $real_disable_strict_key_check = ( $config->{disable_strict_key_check} ) ? 'no' : 'ask';
    my $selected_option               = $listbox->get;

    if ( $selected_option ) {
        exit_mainloop();
        return exec qq{exec ssh -o "LogLevel ERROR" -o "StrictHostKeyChecking $real_disable_strict_key_check" -F "$real_ssh_config" "$selected_option"};
    }

    return 1;
}

## handle terminal request
sub run_terminal {
    my $self = @_;

    my $terminal_bin;
    my $real_shell_config = $config->{shell_config} || $ENV{'HOME'} . '/.shell';

    ## attempt to read ~/.shell
    if ( open( my $shell_config_fh, '<', $real_shell_config ) ) {
        ## found it
        $terminal_bin = <$shell_config_fh>;
        chomp $terminal_bin;
        close $shell_config_fh;
    }

    ## catch bad or missing .shell files
    $terminal_bin = '/usr/bin/env -- /bin/bash --noprofile'
      unless ( defined $terminal_bin && -x $terminal_bin );

    ## done, exit
    exit_mainloop();
    return exec qq{exec $terminal_bin};
}


########################
## renderer functions ##
########################

## mainloop killer
sub exit_mainloop {
    my $self = @_;

    $cui->{mainloop} = undef;
    return $cui->leave_curses();
}

## configure bindings
if ( $listbox ) {
    ## show greeter
    if ( $real_show_greeter ) {
        $listbox->set_binding( \&greeter_dialog, 'G' );
        $listbox->set_binding( \&greeter_dialog, 'g' );
    }

    ## show help page
    $listbox->set_binding( \&help_dialog, 'H' );
    $listbox->set_binding( \&help_dialog, 'h' );

    ## quit software
    $listbox->set_binding( \&exit_mainloop, 27 ); # esc
    $listbox->set_binding( \&exit_mainloop, 'Q' );
    $listbox->set_binding( \&exit_mainloop, 'q' );

    ## focus search box
    if ( $is_fzf_installed ) {
        ## unset default search
        $listbox->clear_binding('search-forward');
        $listbox->clear_binding('search-backward');
        ## set new binding
        $listbox->set_binding( \&fzf_focus, '/' );
        $listbox->set_binding( \&fzf_focus, '?' );
    }

    ## switch to terminal
    unless ( $real_disallow_terminal ) {
        $listbox->set_binding( \&run_terminal, 'T' );
        $listbox->set_binding( \&run_terminal, 't' );
    }
}
if ( $textentry ) {
    $textentry->set_binding( \&listbox_focus, 258 ); # arrow-dn
}

## boot mainloop
$cui->focus(undef, 1); # 1 = forced focus
$cui->draw;
$cui->{mainloop} = 1;
$cui->do_one_event while ( $cui->{mainloop} );
